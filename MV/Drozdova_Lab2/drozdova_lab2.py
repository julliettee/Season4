# -*- coding: utf-8 -*-
"""Drozdova_Lab2

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1DzkdUe5z-5FMQrhjWkarV88s3-ULHl7Y

# –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞—è —Ä–∞–±–æ—Ç–∞ ‚Ññ2
## –†–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π. –ß–∏—Å–ª–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –Ω–µ–ª–∏–Ω–µ–π–Ω—ã—Ö —É—Ä–∞–≤–Ω–µ–Ω–∏–π.

# –ó–∞–¥–∞–Ω–∏–µ 1
–ù–∞–ø–∏—Å–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –Ω–∞—Ö–æ–¥–∏—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –ø–æ –º–æ–¥—É–ª—é —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (–ø–∞—Ä—É –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã—Ö –ø–æ –º–æ–¥—É–ª—é
—Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π) –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –µ–º—É (–∏–º) —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –≤–µ–∫—Ç–æ—Ä (—Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –≤–µ–∫—Ç–æ—Ä—ã) –º–∞—Ç—Ä–∏—Ü—ã ùê¥ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ
–≤–æ–∑–º–æ–∂–Ω–æ–π —Ç–æ—á–Ω–æ—Å—Ç—å—é (–≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –æ–±—ã—á–Ω—ã—Ö double —á–∏—Å–µ–ª). –ü—Ä–∏–º–µ–Ω–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É –∫ —Å–ª–µ–¥—É—é—â–∏–º –Ω–∏–∂–µ –≤—Ö–æ–¥–Ω—ã–º –¥–∞–Ω–Ω—ã–º. –í –æ—Ç—á–µ—Ç–µ
–ø–æ–¥—Ä–æ–±–Ω–æ –∏–∑–ª–æ–∂–∏—Ç—å —Å–ø–æ—Å–æ–± –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–ª—É—á–∞—è –∏ –∫—Ä–∏—Ç–µ—Ä–∏—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏—Ç–µ—Ä–∞—Ü–∏–π. –ü—Ä–æ–≤–µ–¥–∏—Ç–µ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ
—Å–∫–æ—Ä–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç—ã –≤–∞—à–µ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç–∏ –º–∞—Ç—Ä–∏—Ü—ã, –∏—Å–ø–æ–ª—å–∑—É—è –¥–ª—è —Ç–µ—Å—Ç–æ–≤ –º–∞—Ç—Ä–∏—Ü—É —Å–æ —Å–ª—É—á–∞–π–Ω—ã–º–∏
—á–∏—Å–ª–∞–º–∏. –ü–æ—Å—Ç—Ä–æ–π—Ç–µ –≥—Ä–∞—Ñ–∏–∫ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–±–æ—Ç—ã –æ—Ç —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç–∏. –í—ã—á–∏—Å–ª–∏—Ç–µ –∞—Å–∏–º–ø—Ç–æ—Ç–∏—á–µ—Å–∫—É—é —Å–ª–æ–∂–Ω–æ—Å—Ç—å
—Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –≤–∞–º–∏ –∞–ª–≥–æ—Ä–∏—Ç–º–∞.

–ë—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—Ç–µ–ø–µ–Ω–Ω–æ–π –º–µ—Ç–æ–¥. 
–ù–∞ –∫–∞–∂–¥–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏ –±—É–¥–µ–º –ø—Ä–æ–≤–µ—Ä—è—Ç—å 3 —Å–ª—É—á–∞—è:

1.   $|Œª_1|>|Œª_2| \geq |Œª_3| \geq  ...\geq |Œª_n| $
2.  $ Œª_1 = -Œª_2, |Œª_2| > |Œª_3| \geq |Œª_4| \geq ... \geq |Œª_n| $
3. $Œª_1, Œª_2 - $ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ-—Å–æ–ø—Ä—è–∂–µ–Ω–Ω–∞—è –ø–∞—Ä–∞.

–î–ª—è 1 –∏ 2 —Å–ª—É—á–∞—è –∫—Ä–∏—Ç–µ—Ä–∏–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±—É–¥–µ—Ç —Å–ª–µ–¥—É—é—â–∏–º:
$|Œª^k - Œª^{k+1}| < Œµ$, –≥–¥–µ $Œª^i - $ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ –Ω–∞ $i$-–æ–º —à–∞–≥–µ.
–¢.–∫. –º—ã –º–æ–∂–µ–º —Å—Ä–∞–≤–Ω–∏–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –º–æ–¥—É–ª–∏ –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã—Ö —á–∏—Å–µ–ª, —Ç–æ –¥–ª—è 3 —Å–ª—É—á–∞—è –±—ã–ª –≤—ã–±—Ä–∞–Ω –¥—Ä—É–≥–æ–π –∫—Ä–∏—Ç–µ—Ä–∏–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.
–ï—Å–ª–∏ $Œª^k = a^k + i\cdot b^k - $ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ –Ω–∞ $k$-–æ–º —à–∞–≥–µ, —Ç–æ –∞–ª–≥–æ—Ä–∏—Ç–º –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è, –µ—Å–ª–∏ $ \sqrt{((Œª^k - Œª^{k+1}).real)^2 + ((Œª^k - Œª^{k+1}).imag)^2} $, –≥–¥–µ $.real, .imag - $ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞—è –∏ –º–Ω–∏–º–∞—è —á–∞—Å—Ç–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ.

–†–µ—à–∏–º –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è –ø–µ—Ä–≤–æ–π –º–∞—Ç—Ä–∏—Ü—ã.
"""

A = [
     [1, -2, 1, 0, -1, 1, -2, 2, 0, -2],
     [0, 2, 0, 0, 2, 1, -1, -1, -1, -2],
     [0, 1, 0, -1, 1, -1, 0, -1, 1, -1],
     [-2, -1, 2, -1, 0, 0, 0, 0, 1, 0],
     [1, -2, 0, 1, 0, -2, -1, 0, 2, 2],
     [-2, -2, 0, -2, 0, 1, 1, -2, 1, 1],
     [-1, -2, -1, -1, -2, -1, -2, 1, -1, 2],
     [-2, 1, 2, -2, 0, 2, 1, -1, -2, 2],
     [0, 1, 0, 1, 1, -2, 2, 0, 1, 1],
     [0, 0, 2, -1, -1, 0, -2, 2, -1, -1]
]
y_0 = [-1,  1,  0,  2, -2, 1, 0,  0, 1, -1]
eps = 10 ** (-9)
solution = find_eigenvector(y_0, eps)
print("eigenvalue = ", solution[1])
print("eigenvector = ", solution[2])

"""–¢–µ–ø–µ—Ä—å –Ω–∞–π–¥–µ–º –Ω–∞–π–¥–µ–º —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –≤–µ–∫—Ç–æ—Ä –¥–ª—è –≤—Ç–æ—Ä–æ–π –º–∞—Ç—Ä–∏—Ü—ã."""

A = [
     [-1, 1, -1, 0, -1, 0, -1, 1, 1, -1, 0, -1, -1, 1, 0, 0, 1, 1, 1, 1],
     [-1, 0, -1, 1, -1, 0, 0, 0, 0, -1, 0, 0, -1, 1, 0, -1, 1, -1, -1, 0],
     [1, 0, -1, 1, 0, 1, -1, -1, -1, 0, -1, -1, 1, -1, 1, 1, -1, 1, -1, 0],
     [-1, 1, 0, 0, -1, 0, 0, -1, 0, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, 0],
     [1, 0, -1, 0, 0, -1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, -1, 0, 0, 1],
     [0, 0, 0, 0, -1, 1, 1, 0, 0, 1, 1, 0, -1, 0, 1, 1, 0, 1, 0, 0],
     [-1, 0, 1, 1, 1, -1, -1, 0, -1, 1, -1, -1, -1, 0, -1, 0, 0, 0, -1, 1],
     [0, 0, -1, -1, 0, 1, 1, 1, 1, -1, 0, 0, -1, 1, 1, 1, 1, 0, 0, -1],
     [0, 0, 1, 1, 0, 1, 1, 0, 1, -1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1],
     [0, -1, 0, 0, 1, 0, -1, 0, -1, 0, -1, 0, -1, 0, 1, -1, 0, 0, 1, 1],
     [1, -1, 1, -1, -1, -1, 1, 0, -1, 0, 1, 1, -1, 0, 1, 1, 1, 0, 0, 0],
     [0, 1, 0, 0, -1, 0, 1, 0, 1, 0, 0, 1, 1, -1, -1, 0, -1, 1, 1, -1],
     [-1, -1, -1, -1, 0, 1, -1, 0, 0, -1, 0, 0, 0, 1, 1, 0, 0, 0, -1, 0],
     [-1, 0, 1, 0, -1, 0, 0, 1, -1, 1, 1, -1, 1, 1, 1, -1, 1, -1, -1, 0],
     [1, -1, 0, -1, -1, 0, -1, -1, 0, 0, 1, 0, 1, 1, -1, 1, 0, 0, -1, 0],
     [-1, -1, 1, 0, -1, 1, 1, -1, 1, 0, 0, -1, 1, -1, -1, 0, 0, 1, 1, 1],
     [0, 0, -1, 0, 0, 0, 0, -1, 1, 1, 0, -1, 1, -1, 0, 0, 0, -1, -1, 1],
     [-1, 0, -1, -1, -1, 1, 1, -1, 1, -1, 1, -1, 1, -1, 1, 1, 0, -1, 0, -1],
     [-1, 0, 1, 0, 0, 0, 0, -1, 1, -1, 1, -1, 0, -1, -1, 1, 0, 1, 0, 0],
     [0, -1, -1, 1, -1, 1, -1, -1, -1, 1, 1, -1, 0, -1, -1, 0, 1, 0, -1, -1]
     ];
y_0 = [-1,  1,  0,  2, -2, 1, 0,  0, 1, -1, -1,  1,  0,  2, -2, 1, 0,  0, 1, -1]
eps = 10 ** (-9)
solution = find_eigenvector(y_0, eps)
print("eigenvalue = ", solution[1])
print("eigenvector = ", solution[2])

"""–¢–µ–ø–µ—Ä—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–±–æ—Ç—ã –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –æ—Ç —Ä–∞–∑–º–µ—Ä–∞ –º–∞—Ç—Ä–∏—Ü—ã."""

eps = 10 ** (-3)
times = []
vals = []
for size in range(2, 151):
  A = [[0] * size for i in range(size)]
  y_0 = []
  if (size % 10 == 0):
    for i in range(size):
      y_0.append(random.randint(-5, 5))
      while (y_0[i] == 0):
        y_0[i] = random.randint(-5, 5)
      for j in range(size):
        A[i][j] = random.randint(-5, 5)
    #print(size)
    start_time = time.time()
    solution = find_eigenvector(y_0, eps)
    #print("eigenvalue = ", solution[1])
    #print("eigenvector = ", solution[2])
    #print("time = ", time.time() - start_time)
    times.append(time.time() - start_time)
    vals.append(size)
n = len(vals)
plt.plot(vals, times) 
plt.show()

"""–ò–∑ –≥—Ä–∞—Ñ–∏–∫–∞ –≤–∏–¥–∏–º, —á—Ç–æ —Å —Ä–∞–∑–º–µ—Ä–æ–º –º–∞—Ç—Ä–∏—Ü—ã –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è. –ù–æ —Ç–∞–∫ –∂–µ –µ—Å—Ç—å –∏ "—Å–∫–∞—á–∫–∏", –≥–¥–µ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –º–µ–Ω—å—à–µ, —á–µ–º —É –º–∞—Ç—Ä–∏—Ü—ã —Å –º–µ–Ω—å—à–∏–º —Ä–∞–∑–º–µ—Ä–æ–º. –¢–∞–∫ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø–æ—Ç–æ–º—É, —á—Ç–æ —Å—Ö–æ–¥–∏–º–æ—Å—Ç—å –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ç–æ–≥–æ, –Ω–∞—Å–∫–æ–ª—å–∫–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç –æ—Å—Ç–∞–ª—å–Ω—ã—Ö.

# –ó–∞–¥–∞–Ω–∏–µ 2
–ù–∞–ø–∏—Å–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É, —Ä–µ–∞–ª–∏–∑—É—é—â—É—é ùëÑùëÖ-–∞–ª–≥–æ—Ä–∏—Ç–º –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è –≤—Å–µ—Ö —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –º–∞—Ç—Ä–∏—Ü—ã ùê¥ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –≤–æ–∑–º–æ–∂–Ω–æ–π
—Ç–æ—á–Ω–æ—Å—Ç—å—é. –ü—Ä–∏–º–µ–Ω–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É –∫ –º–∞—Ç—Ä–∏—Ü–∞–º –∏–∑ –ø–µ—Ä–≤–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è. –ü—Ä–æ–≤–µ–¥–∏—Ç–µ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏
—Ä–∞–±–æ—Ç—ã –≤–∞—à–µ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç–∏ –º–∞—Ç—Ä–∏—Ü—ã, –∏—Å–ø–æ–ª—å–∑—É—è –¥–ª—è —Ç–µ—Å—Ç–æ–≤ –º–∞—Ç—Ä–∏—Ü—É —Å–æ —Å–ª—É—á–∞–π–Ω—ã–º–∏ —á–∏—Å–ª–∞–º–∏.
–ü–æ—Å—Ç—Ä–æ–π—Ç–µ –≥—Ä–∞—Ñ–∏–∫ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–±–æ—Ç—ã –æ—Ç —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç–∏. –í—ã—á–∏—Å–ª–∏—Ç–µ –∞—Å–∏–º–ø—Ç–æ—Ç–∏—á–µ—Å–∫—É—é —Å–ª–æ–∂–Ω–æ—Å—Ç—å —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –≤–∞–º–∏
–∞–ª–≥–æ—Ä–∏—Ç–º–∞.

–ë—É–¥–µ–º –≤—ã–ø–æ–ª–Ω—è—Ç—å –∏—Ç–µ—Ä–∞—Ü–∏–∏ *QR* –∞–ª–≥–æ—Ä–∏—Ç–º–∞, –ø–æ–∫–∞ –ø–æ–¥ –≥–ª–∞–≤–Ω–æ–π –¥–∏–∞–≥–æ–Ω–∞–ª—å—é –Ω–µ –±—É–¥–µ—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω—É–ª–µ–π.

–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –±—É–¥–µ–º –∏—Å–∫–∞—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è. –í –ø–æ–ª—É—á–µ–Ω–Ω–æ–π –º–∞—Ç—Ä–∏—Ü–µ –±—É–¥–µ–º –∏–¥—Ç–∏ –ø–æ –≥–ª–∞–≤–Ω–æ–π –¥–∏–∞–≥–æ–Ω–∞–ª–∏ –∏ —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å 2 —Å–ª—É—á–∞—è:

1.   –ù–∞ *i*-–æ–º —à–∞–≥–µ –ø–æ–¥ –≥–ª–∞–≤–Ω–æ–π –¥–∏–∞–≥–æ–Ω–∞–ª—å—é —Å—Ç–æ–∏—Ç 0. –ó–Ω–∞—á–∏—Ç –º—ã –Ω–∞—à–ª–∏ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. 
2. –ù–∞ *i*-–æ–º —à–∞–≥–µ –ø–æ–¥ –≥–ª–∞–≤–Ω–æ–π –¥–∏–∞–≥–æ–Ω–∞–ª—å—é —Å—Ç–æ–∏—Ç —á–∏—Å–ª–æ, –Ω–µ —Ä–∞–≤–Ω–æ–µ 0. –ó–Ω–∞—á–∏—Ç –¥–ª—è —ç—Ç–æ–≥–æ –±–ª–æ–∫–∞ $ 2*2 $ –±—É–¥–µ–º –∏—Å–∫–∞—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—é.

–†–µ—à–∏–º –¥–ª—è 1–æ–π –º–∞—Ç—Ä–∏—Ü—ã.
"""

A = [
     [1, -2, 1, 0, -1, 1, -2, 2, 0, -2],
     [0, 2, 0, 0, 2, 1, -1, -1, -1, -2],
     [0, 1, 0, -1, 1, -1, 0, -1, 1, -1],
     [-2, -1, 2, -1, 0, 0, 0, 0, 1, 0],
     [1, -2, 0, 1, 0, -2, -1, 0, 2, 2],
     [-2, -2, 0, -2, 0, 1, 1, -2, 1, 1],
     [-1, -2, -1, -1, -2, -1, -2, 1, -1, 2],
     [-2, 1, 2, -2, 0, 2, 1, -1, -2, 2],
     [0, 1, 0, 1, 1, -2, 2, 0, 1, 1],
     [0, 0, 2, -1, -1, 0, -2, 2, -1, -1]
]

n = len(A)
while (Zeros() < (n - 1) // 2):
  MakingForm()

res = SolutionQR()
eps = 10 ** (-9)
while (1):
  MakingForm()
  new_res = SolutionQR()
  n = len(res)
  mx = 0
  for i in range(n):
    diff = res[i] - new_res[i]
    val = (diff.real ** 2 + diff.imag ** 2) ** 0.5
    mx = max(mx, val)
    res[i] = new_res[i]
  
  if (mx < eps):
    break
print("eigenvalue:")
for i in range(len(res)):
  print(res[i])

"""–ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ –¥–ª—è 2–æ–π."""

A = [
     [-1, 1, -1, 0, -1, 0, -1, 1, 1, -1, 0, -1, -1, 1, 0, 0, 1, 1, 1, 1],
     [-1, 0, -1, 1, -1, 0, 0, 0, 0, -1, 0, 0, -1, 1, 0, -1, 1, -1, -1, 0],
     [1, 0, -1, 1, 0, 1, -1, -1, -1, 0, -1, -1, 1, -1, 1, 1, -1, 1, -1, 0],
     [-1, 1, 0, 0, -1, 0, 0, -1, 0, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, 0],
     [1, 0, -1, 0, 0, -1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, -1, 0, 0, 1],
     [0, 0, 0, 0, -1, 1, 1, 0, 0, 1, 1, 0, -1, 0, 1, 1, 0, 1, 0, 0],
     [-1, 0, 1, 1, 1, -1, -1, 0, -1, 1, -1, -1, -1, 0, -1, 0, 0, 0, -1, 1],
     [0, 0, -1, -1, 0, 1, 1, 1, 1, -1, 0, 0, -1, 1, 1, 1, 1, 0, 0, -1],
     [0, 0, 1, 1, 0, 1, 1, 0, 1, -1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1],
     [0, -1, 0, 0, 1, 0, -1, 0, -1, 0, -1, 0, -1, 0, 1, -1, 0, 0, 1, 1],
     [1, -1, 1, -1, -1, -1, 1, 0, -1, 0, 1, 1, -1, 0, 1, 1, 1, 0, 0, 0],
     [0, 1, 0, 0, -1, 0, 1, 0, 1, 0, 0, 1, 1, -1, -1, 0, -1, 1, 1, -1],
     [-1, -1, -1, -1, 0, 1, -1, 0, 0, -1, 0, 0, 0, 1, 1, 0, 0, 0, -1, 0],
     [-1, 0, 1, 0, -1, 0, 0, 1, -1, 1, 1, -1, 1, 1, 1, -1, 1, -1, -1, 0],
     [1, -1, 0, -1, -1, 0, -1, -1, 0, 0, 1, 0, 1, 1, -1, 1, 0, 0, -1, 0],
     [-1, -1, 1, 0, -1, 1, 1, -1, 1, 0, 0, -1, 1, -1, -1, 0, 0, 1, 1, 1],
     [0, 0, -1, 0, 0, 0, 0, -1, 1, 1, 0, -1, 1, -1, 0, 0, 0, -1, -1, 1],
     [-1, 0, -1, -1, -1, 1, 1, -1, 1, -1, 1, -1, 1, -1, 1, 1, 0, -1, 0, -1],
     [-1, 0, 1, 0, 0, 0, 0, -1, 1, -1, 1, -1, 0, -1, -1, 1, 0, 1, 0, 0],
     [0, -1, -1, 1, -1, 1, -1, -1, -1, 1, 1, -1, 0, -1, -1, 0, 1, 0, -1, -1]
     ];


n = len(A)
while (Zeros() < (n - 1) // 2):
  MakingForm()

res = SolutionQR()
eps = 10 ** (-7)
while (1):
  MakingForm()
  new_res = SolutionQR()
  n = len(res)
  mx = 0
  for i in range(n):
    diff = res[i] - new_res[i]
    val = (diff.real ** 2 + diff.imag ** 2) ** 0.5
    mx = max(mx, val)
    res[i] = new_res[i]
  
  if (mx < eps):
    break
print("eigenvalues:")
for i in range(len(res)):
  print(res[i])

"""–¢–µ–ø–µ—Ä—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–±–æ—Ç—ã –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –æ—Ç —Ä–∞–∑–º–µ—Ä–∞ –º–∞—Ç—Ä–∏—Ü—ã."""

eps = 10 ** (-3)
times = []
vals = []
for size in range(2, 21):
  A = [[0] * size for i in range(size)]
  for i in range(size):
    for j in range(size):
      A[i][j] = random.randint(-5, 5)
  #print("size = ", size)
  start_time = time.time()
  n = len(A)
  while (Zeros() < (n - 1) // 2):
    MakingForm()
  res = SolutionQR()
  while (1):
    MakingForm()
    new_res = SolutionQR()
    n = len(res)
    mx = 0
    for i in range(n):
      diff = res[i] - new_res[i]
      val = (diff.real ** 2 + diff.imag ** 2) ** 0.5
      mx = max(mx, val)
      res[i] = new_res[i]
    if (mx < eps):
      break
  times.append(time.time() - start_time)
  vals.append(size)
n = len(vals)
plt.plot(vals, times) 
plt.show()

"""–ò–∑ –≥—Ä–∞—Ñ–∏–∫–∞ –≤–∏–¥–∏–º, —á—Ç–æ —Å —Ä–∞–∑–º–µ—Ä–æ–º –º–∞—Ç—Ä–∏—Ü—ã –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è. –ù–æ —Ç–∞–∫ –∂–µ –µ—Å—Ç—å –∏ "—Å–∫–∞—á–∫–∏", –≥–¥–µ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –º–µ–Ω—å—à–µ, —á–µ–º —É –º–∞—Ç—Ä–∏—Ü—ã —Å –º–µ–Ω—å—à–∏–º —Ä–∞–∑–º–µ—Ä–æ–º. –¢–∞–∫ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø–æ—Ç–æ–º—É, —á—Ç–æ —Å—Ö–æ–¥–∏–º–æ—Å—Ç—å –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ç–æ–≥–æ, –Ω–∞—Å–∫–æ–ª—å–∫–æ —Å–∏–ª—å–Ω–æ —Ä–∞–∑–ª–∏—á–∞—é—Ç—Å—è —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è.

## –ó–∞–¥–∞–Ω–∏–µ 3

–î–∞–Ω–æ –Ω–µ–ª–∏–Ω–µ–π–Ω–æ–µ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ $\frac{(x^9 + \pi) cos(ln(x^2+1))}{e^{x^2}} - \frac{x}{2022} = 0$.


–û—Ç–¥–µ–ª–∏—Ç—å –≤—Å–µ –µ–≥–æ –∫–æ—Ä–Ω–∏. –û–±–æ—Å–Ω–æ–≤–∞—Ç—å (–Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–æ–∫–∞–∑–∞—Ç—å —Å—Ç—Ä–æ–≥–æ) –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –∫–∞–∂–¥–æ–≥–æ –∫–æ—Ä–Ω—è –Ω–∞ –æ—Ç—Ä–µ–∑–∫–µ, –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ
–¥—Ä—É–≥–∏—Ö –∫–æ—Ä–Ω–µ–π. –ú–µ—Ç–æ–¥–æ–º –±–∏—Å–µ–∫—Ü–∏–∏ —Å—É–∑–∏—Ç—å –æ—Ç—Ä–µ–∑–∫–∏ –æ—Ç–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç–∏ –∫–æ—Ä–Ω–µ–π –¥–æ —Ä–∞–∑–º–µ—Ä–∞ –Ω–µ –±–æ–ª–µ–µ $10^{‚àí4}$
. –ú–µ—Ç–æ–¥–æ–º –ù—å—é—Ç–æ–Ω–∞ –Ω–∞–π—Ç–∏ –≤—Å–µ
–∫–æ—Ä–Ω–∏ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –≤–æ–∑–º–æ–∂–Ω–æ–π —Ç–æ—á–Ω–æ—Å—Ç—å—é. –í –æ—Ç—á–µ—Ç –≤–∫–ª—é—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Ç–µ—Ä–∞—Ü–∏–π –æ–±–æ–∏—Ö –º–µ—Ç–æ–¥–æ–≤.
"""

import numpy as np
import matplotlib.pyplot as plt

def f(x):
  return (x ** 9 + np.pi) * (np.cos(np.log(x**2 + 1))) / np.exp(x**2) - x/2022
y = lambda x: f(x)


fig = plt.subplots()
x = np.linspace(-8, 8,100000)
plt.plot(x, y(x))
ax = plt.gca() 
ax.axhline(y=0, color='k')
plt.show()

"""–ò–∑ –≥—Ä–∞—Ñ–∏–∫–∞ –≤–∏–¥–Ω–æ, —á—Ç–æ –∫–æ—Ä–Ω–∏ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –Ω–∞ –ø—Ä–æ–º–µ–∂—É—Ç–∫–∞—Ö $[-2.5, -1.6], [-1.5, -1], [1.6, 2.5].$"""

y = lambda x: fp(x)
fig = plt.subplots()
x = np.linspace(-2.5, -1.6,100000)
plt.plot(x, y(x))
ax = plt.gca() 
ax.axhline(y=0, color='k')
plt.show()

y = lambda x: fp(x)
fig = plt.subplots()
x = np.linspace(-1.5, -1,100000)
plt.plot(x, y(x))
ax = plt.gca() 
ax.axhline(y=0, color='k')
plt.show()

y = lambda x: fp(x)
fig = plt.subplots()
x = np.linspace(1.6, 2.5,100000)
plt.plot(x, y(x))
ax = plt.gca() 
ax.axhline(y=0, color='k')
plt.show()

"""–ö–∞–∫ –≤–∏–¥–∏–º, –ø—Ä–æ–∏–∑–≤–æ–¥–Ω–∞—è –Ω–∞ —ç—Ç–∏—Ö –æ—Ç—Ä–µ–∑–∫–∞—Ö –Ω–µ –º–µ–Ω—è–µ—Ç —Å–≤–æ–π –∑–Ω–∞–∫, –∑–Ω–∞—á–∏—Ç –Ω–∞ –Ω–∏—Ö –ø–æ 1 –∫–æ—Ä–Ω—é.

–¢–∞–∫ –∂–µ –≤–æ–∑–º–æ–∂–Ω–æ –µ—Å—Ç—å –∫–æ—Ä–Ω–∏ –Ω–∞ –ø—Ä–æ–º–µ–∂—É—Ç–∫–∞—Ö $[-6,-4.5], [4, 5]$. –ß—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, –µ—Å—Ç—å –ª–∏ –æ–Ω–∏ –Ω–∞ –Ω–∏—Ö, –ø–æ—Å–º–æ—Ç—Ä–∏–º –∫–∞–∫ –≤—ã–≥–ª—è–¥–∏—Ç –≥—Ä–∞—Ñ–∏–∫ —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–∞ —ç—Ç–∏—Ö –ø—Ä–æ–º–µ–∂—É—Ç–∫–∞—Ö.
"""

x = np.linspace(-6, -4.5,100000)
plt.plot(x, y(x))
ax = plt.gca() 
ax.axhline(y=0, color='k')

x = np.linspace(4, 5,100000)
plt.plot(x, y(x))
ax = plt.gca() 
ax.axhline(y=0, color='k')

"""–ò–∑ –≥—Ä–∞—Ñ–∏–∫–æ–≤ –≤–∏–¥–Ω–æ, —á—Ç–æ –Ω–∞ –ø—Ä–æ–º–µ–∂—É—Ç–∫–∞—Ö $[-6,-4.5], [4, 5]$ –∫–æ—Ä–Ω–µ–π –Ω–µ—Ç."""

a = -2.5
b = -1.6
print("old borders: [", a, ", ", b, "]", sep = '')
borders = bin_search(-3, -1.5, 10**-4)
a = borders[0]
b = borders[1]
print("iter for search new borders: ", borders[2])
print("new borders: [", a, ", ", b, "]", sep = '')
x, iter = Newton(a, b, 10**-30)
print("solution: ")
print("iter = ", iter)
print("x =", x)
print("f(x) =", f(x))

a = -1.5
b = -1
print("old borders: [", a, ", ", b, "]", sep = '')
borders = bin_search(a, b, 10**-4)
a = borders[0]
b = borders[1]
print("iter for search new borders: ", borders[2])
print("new borders: [", a, ", ", b, "]", sep = '')
x, iter = Newton(a, b, 10**-30)
print("solution: ")
print("iter = ", iter)
print("x =", x)
print("f(x) =", f(x))

a = 1.6
b = 2.5
print("old borders: [", a, ", ", b, "]", sep = '')
borders = bin_search(a, b, 10**-4)
a = borders[0]
b = borders[1]
print("iter for search new borders: ", borders[2])
print("new borders: [", a, ", ", b, "]", sep = '')
x, iter = Newton(a, b, 10**-30)
print("solution: ")
print("iter = ", iter)
print("x =", x)
print("f(x) =", f(x))

"""–ö–∞–∫ –≤–∏–¥–∏–º, –º–µ—Ç–æ–¥ –ù—å—é—Ç–æ–Ω–∞ –Ω–∞—à–µ–ª –æ—Ç–≤–µ—Ç –∑–∞ 3 –∏—Ç–µ—Ä–∞—Ü–∏–∏, —á—Ç–æ —è–≤–ª—è–µ—Ç—Å—è —Ö–æ—Ä–æ—à–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º.

–î–∞–ª–µ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã —Ñ—É–Ω–∫—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å –≤ –∫–æ–¥–µ –≤—ã—à–µ.

–ú–µ—Ç–æ–¥ –±–∏—Å–µ–∫—Ü–∏–∏ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –≥—Ä–∞–Ω–∏—Ü –ø—Ä–æ–º–µ–∂—É—Ç–∫–æ–≤.
"""

def bin_search(a, b, eps):
  iter = 0
  while(b - a > eps):
    m = (b + a) / 2
    iter += 1
    if (f(a) * f(m) > 0):
      a = m
    else:
      b = m
  return [a, b, iter]

"""–ü–æ–∏—Å–∫ –∑–Ω–∞—á–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ –≤ —Ç–æ—á–∫–µ —Ö."""

def fp(x):
  fraction1 = -2 * np.exp(-(x**2))*(x**9 + np.pi) * x * np.sin(np.log(x**2 + 1)) / (x**2 + 1)
  fraction2 = -2 * np.exp(-(x**2))*(x**9 + np.pi) * x * np.cos(np.log(x**2 + 1))
  fraction3 = 9 * np.exp(-(x**2)) * (x ** 8) * np.cos(np.log(x**2 + 1)) - 1 /2022
  return fraction1 + fraction2 + fraction3

"""–ú–µ—Ç–æ–¥ –ù—å—é—Ç–æ–Ω–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ä–µ—à–µ–Ω–∏–π."""

def Newton(a, b, eps):
  x0 = b
  x1 = (a + b) /2
  iter = 0
  while(abs(x1-x0) > eps):
    x0 = x1
    x1 = x0 - f(x0)/fp(x0)
    iter += 1
  return x1, iter

import random
import time
import matplotlib.pyplot as plt

"""–ü–µ—Ä–µ–º–Ω–æ–∂–µ–Ω–∏–µ –º–∞—Ç—Ä–∏—Ü."""

def MultiplyMatrix(A, B):
  n = len(A)
  C = [[0] * n for i in range(n)]
  for i in range(n):
    for j in range(n):
      for l in range(n):
        C[i][j] += A[i][l] * B[l][j]
  return C

"""–ù–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–µ–∫—Ç–æ—Ä–∞ –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ—Ä–º—ã –≤–µ–∫—Ç–æ—Ä–∞."""

def normalize(a):
  mx = get_norm(a)
  res = []
  n = len(a)
  for i in range(n):
    x = a[i]
    res.append(x / mx)
  return res

  
def get_norm(a):
  mx = 0
  n = len(a)
  for i in range(n):
    x = a[i]
    mx = max(mx, abs(x))
  return mx

"""–£–º–Ω–æ–∂–µ–Ω–∏–µ –º–∞—Ç—Ä–∏—Ü—ã –Ω–∞ –≤–µ–∫—Ç–æ—Ä."""

def Multiply(A, b):
  n = len(b)
  res = [0] * n
  for i in range(n):
    for j in range(len(A[i])):
      res[i] += A[i][j] * b[j]
  return res

"""–ü–æ–∏—Å–∫ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π —Å—Ç–µ–ø–µ–Ω–Ω—ã–º –º–µ—Ç–æ–¥–æ–º."""

import math
def find_eigenvector(y, eps):
  n = len(y)
  u1 = []
  yi = []
  yi_1 = []
  for i in range(n):
    u1.append(y[i])
    yi.append(y[i])
    yi_1.append((y[i]))
  l1 = 2**31
  l2 = l1
  l3 = complex(l1)
  iter = 0
  case1 = 1
  case2 = 1
  case3 = 1
  diff1 = l1
  diff2 = l1
  diff3 = l1
  case_solution = -1
  eigenvalue = 0
  eigenvector = []
  while(case1 or case2 or case3):
    iter+=1
    if case1:
      res = solve_case1(A, u1, l1)
      if (diff1 < abs(l1 - res[1]) and iter > 20):
        case1 = 0
      diff1 = abs(l1 - res[1])
      l1 = res[1]
      if (res[0] == 1):
        case_solution = 1
        eigenvalue = l1
        eigenvector = u1
        break

    if case2:
      res = solve_case2(A, yi, l2)
      if (diff2 < abs(l2 - res[1]) and iter > 20):
        case2 = 0
      diff2 = abs(l2 - res[1])
      l2 = res[1]
      if (res[0] == 1):
        case_solution = 2
        eigenvalue = l2
        eigenvector = res[3]
        break
      else:
        for i in range(n):
          yi[i] = res[2][i]

    if case3:
      res = solve_case3(A, yi_1, l3)
      if (iter > 700):
        case3 = 0
      if (((l3.real - res[1].real) ** 2 + abs(l3.imag - res[1].imag) ** 2) ** 0.5 < eps):
        case_solution = 3
        eigenvalue = res[1]
        eigenvector = res[2]
        break
      l3 = res[1]
      for i in range(n):
        yi_1[i] = res[3][i]
  return [case_solution, eigenvalue, eigenvector]

"""–°—Ç–µ–ø–µ–Ω–Ω–æ–π –º–µ—Ç–æ–¥, 1 —Å–ª—É—á–∞–π"""

def solve_case1(A, u, l):
  v = Multiply(A, u)
  j = 0
  n = len(v)
  for i in range(n):
    if math.fabs(u[j]) < math.fabs(u[i]) and v[i] != 0:
      j = i
  l1 = v[j] / u[j]
  for i in range(n):
    u[i] = v[i] / v[j]
  if abs(l1 - l) < eps:
    return [1, l1]
  return [0, l1]

"""–°—Ç–µ–ø–µ–Ω–Ω–æ–π –º–µ—Ç–æ–¥, 2 —Å–ª—É—á–∞–π"""

def solve_case2(A, yi, l):
  yi1 = Multiply(A, yi)
  yi2 = Multiply(A, yi1)
  j = 0
  n = len(yi2)
  norm_yi2 = 0
  for i in range(n):
    norm_yi2 = max(norm_yi2, yi2[i])
    if math.fabs(yi[j]) < math.fabs(yi[i]):
      j = i
  l1 = (abs(yi2[j] / yi[j]))**0.5
  v = [0] * n
  norm = 0
  for i in range(n):
    v[i] = yi2[i] + l1 * yi[i] # —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –≤–µ–∫—Ç–æ—Ä
    norm += v[i] ** 2
  norm = norm ** 0.5
  for i in range(n):
    v[i] /= norm
  for i in range(n):
    yi2[i] /= norm_yi2
  
  if abs(l1 - l) < eps:
    return [1, l1, yi2, v]
  return [0, l1, yi2, v]

"""–°—Ç–µ–ø–µ–Ω–Ω–æ–π –º–µ—Ç–æ–¥, 3 —Å–ª—É—á–∞–π"""

def solve_case3(A, ui_1, l_last):
  n = len(ui_1)

  vi = Multiply(A, ui_1)
  ui = normalize(vi)

  vi1 = Multiply(A, ui)
  ui1 = normalize(vi1)

  vi2 = Multiply(A, ui1)
  ui2 = normalize(vi2)

  j = -1
  mx = 0
  for i in range(n):
    if (vi1[i] != 0 and 
        abs(vi[i] * vi2[i] * get_norm(vi1) - vi1[i] * vi1[i] * get_norm(vi)) != 0 
        and abs(ui_1[i] * vi1[i] - (ui[i] ** 2)*get_norm(vi)) > mx 
        and abs(ui_1[i] * vi1[i] - (ui[i] ** 2)*get_norm(vi)) * vi1[i] != 0):
      mx = abs(ui_1[i] * vi1[i] - (ui[i] ** 2)*get_norm(vi))
      j = i
  
  r = abs(vi[j] * vi2[j] * get_norm(vi1) - vi1[j] * vi1[j] * get_norm(vi))
  r /= mx
  r = r ** 0.5

  cosf = vi2[j] * get_norm(vi1) + r * r * ui[j]
  cosf /= 2 * r * vi1[j]

  sinf = (1 - cosf ** 2) ** 0.5
  lyambda = complex(r * cosf, r * sinf)
  v = [0] * n
  for i in range(n):
    v[i] = vi1[i] - lyambda * ui[i]
  nev = Multiply(A, v)
  norm = 0
  for i in range(n):
    nev[i] -= lyambda * v[i]
    norm += nev[i] ** 2
  return [0, lyambda, v, ui2, norm ** 0.5]

"""–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç—Ä–∞–Ω—Å–ø–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –º–∞—Ç—Ä–∏—Ü—ã."""

def T(Q, n):
  QT = [[0] * n for i in range(n)]
  for i in range(n):
    for j in range(n):
      QT[i][j] = Q[j][i]
  return QT

"""–ü–æ–ª—É—á–µ–Ω–∏–µ –µ–¥–∏–Ω–∏—á–Ω–æ–π –º–∞—Ç—Ä–∏—Ü—ã."""

def IdentityMatrix(n):
  E = [[0] * n for i in range(n)]
  for i in range(n):
    E[i][i] = 1
  return E

"""–ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –∫ –Ω—É–∂–Ω–æ–π —Ñ–æ—Ä–º–µ, –¥–ª—è QR –∞–ª–≥–æ—Ä–∏—Ç–º–∞."""

def MakingForm():
  global A
  n = len(A)
  Q = IdentityMatrix(n)

  for j in range(n - 1):
    for i in range(j + 1, n):
      # –∑–∞–Ω—É–ª—è–µ–º [i][j] —ç–ª–µ–º–µ–Ω—Ç
      if (A[i][j] == 0):
        continue
      det = (A[i][j] **2 + A[j][j] ** 2) ** 0.5
      sinf = A[i][j] / det
      cosf = A[j][j] / det

      Givens = IdentityMatrix(n)
      Givens[i][i] = cosf
      Givens[j][j] = cosf
      Givens[i][j] = -sinf
      Givens[j][i] = sinf
      A = MultiplyMatrix(Givens, A)
      Q = MultiplyMatrix(Q, T(Givens, n))
  A = MultiplyMatrix(A, Q)

"""–ü–æ–∏—Å–∫ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω—É–ª–µ–π –ø–æ–¥ –≥–ª–∞–≤–Ω–æ–π –¥–∏–∞–≥–æ–Ω–∞–ª—å—é."""

def Zeros():
  global A
  n = len(A)
  eps = 10 ** (-15)
  zeros = 0
  for i in range(n - 1):
    if (abs(A[i+1][i]) < eps):
      zeros += 1
  return zeros

"""–ü–æ–∏—Å–∫ —Ä–µ—à–µ–Ω–∏—è –Ω–∞ –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω–æ–π –∫ –Ω—É–∂–Ω–æ–π —Ñ–æ—Ä–º–µ –º–∞—Ç—Ä–∏—Ü–µ."""

def SolutionQR():
  global A
  n = len(A)
  eps = 10 ** (-9)
  result = []
  i = 0
  while i < n:
    if (i == n - 1 or (i + 1 < n and abs(A[i + 1][i]) < eps)):
      result.append(complex(A[i][i]))
      i += 1
    else:
      D = (A[i][i] + A[i + 1][i + 1]) ** 2 - 4 * (A[i][i] * A[i + 1][i + 1] - A[i + 1][i] * A[i][i + 1])
      l1 = (A[i][i] + A[i + 1][i + 1] - complex(D) ** 0.5) / 2
      l2 = (A[i][i] + A[i + 1][i + 1] + complex(D) ** 0.5) / 2
      i += 2
      result.append(l1)
      result.append(l2)
  return result